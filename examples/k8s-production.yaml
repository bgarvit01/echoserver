# Production Kubernetes deployment with enhanced security and monitoring
# kubectl apply -f examples/k8s-production.yaml

---
apiVersion: v1
kind: Namespace
metadata:
  name: echo-server-prod
  labels:
    name: echo-server-prod
    app: echo-server
    environment: production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: echo-server-config
  namespace: echo-server-prod
  labels:
    app: echo-server
    environment: production
data:
  LOGS__LEVEL: "info"
  LOGS__FORMAT: "object"
  ENABLE_LOGS: "true"
  ENABLE_HOST: "true"
  ENABLE_HTTP: "true"
  ENABLE_REQUEST: "true"
  ENABLE_FILE: "false"        # Disabled for security
  ENABLE_ENV: "false"         # Disabled for security
  ENABLE_HEADER: "true"
  CONTROLS__TIMES__MAX: "10000"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo-server
  namespace: echo-server-prod
  labels:
    app: echo-server
    version: v2.0.0
    environment: production
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: echo-server
  template:
    metadata:
      labels:
        app: echo-server
        version: v2.0.0
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/"
    spec:
      serviceAccountName: echo-server
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: echo-server
        image: echo-server:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        envFrom:
        - configMapRef:
            name: echo-server-config
        env:
        - name: HOST
          value: "0.0.0.0"
        - name: PORT
          value: "80"
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - echo-server
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: echo-server
  namespace: echo-server-prod
  labels:
    app: echo-server

---
apiVersion: v1
kind: Service
metadata:
  name: echo-server-service
  namespace: echo-server-prod
  labels:
    app: echo-server
    environment: production
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: echo-server

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: echo-server-ingress
  namespace: echo-server-prod
  labels:
    app: echo-server
    environment: production
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - echo.yourdomain.com
    secretName: echo-server-tls
  rules:
  - host: echo.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: echo-server-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: echo-server-hpa
  namespace: echo-server-prod
  labels:
    app: echo-server
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: echo-server
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
